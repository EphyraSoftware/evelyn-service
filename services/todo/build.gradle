subprojects {
    apply plugin: 'java'

    repositories {
        jcenter()
        maven {
            name = "Nexus"
            url = uri("https://nexus.evelyn.internal:443/registry/ephyra")
        }
        mavenLocal()
    }

    sourceCompatibility = 13
    targetCompatibility = 13
}

project.version = '0.1.0'

ext {
    springFrameworkVersion = '5.2.1.RELEASE'
    keycloakSpringVersion = '4.0.0.Final'
    springMongoVersion = '2.2.1.RELEASE'
    lombokVersion = '1.18.10'

    libraryAuthenticationVersion = System.getenv("LIBRARY_AUTHENTICATION_VERSION") ?: 'dev-local'
}

project(":evelyn-service") {
    dependencies {
        // https://mvnrepository.com/artifact/org.springframework.data/spring-data-mongodb
        implementation group: 'org.springframework.data', name: 'spring-data-mongodb', version: "${springMongoVersion}"

        // https://mvnrepository.com/artifact/org.keycloak/keycloak-spring-boot-2-starter
        implementation group: 'org.keycloak', name: 'keycloak-spring-boot-2-starter', version: "${keycloakSpringVersion}"

        // https://mvnrepository.com/artifact/javax.json/javax.json-api
        implementation group: 'javax.json', name: 'javax.json-api', version: '1.1.4'

        // https://mvnrepository.com/artifact/org.apache.johnzon/johnzon-core
        implementation group: 'org.apache.johnzon', name: 'johnzon-core', version: '1.2.2'

        // https://mvnrepository.com/artifact/com.google.code.gson/gson
        implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

        // https://mvnrepository.com/artifact/org.projectlombok/lombok
        compileOnly group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"

        testImplementation 'org.junit.jupiter:junit-jupiter:5.6.0'
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

project(':rest-api') {
    apply plugin: 'maven-publish'

    group = 'org.evelyn.service'

    dependencies {
        implementation project(':evelyn-service')

        // https://mvnrepository.com/artifact/javax.json/javax.json-api
        implementation group: 'javax.json', name: 'javax.json-api', version: '1.1.4'

        // https://mvnrepository.com/artifact/org.springframework/spring-webmvc
        compileOnly group: 'org.springframework', name: 'spring-webmvc', version: "${springFrameworkVersion}"
    }

    publishing {
        publications {
            maven(MavenPublication) {
                artifactId = 'todo-service-rest-api'
                version = 'dev-local' // Publish a rolling dev-local version
                from components.java
            }
        }
    }
}

/*
 * ******************
 * Local JAR publishing.
 * ******************
 */
task localPublish {
    group = 'evelyn'
    description 'Publishes the core of the service to be used by the monolith server.'
    dependsOn ':rest-api:publishToMavenLocal'
}

/*
 * ******************
 * Image packaging.
 * ******************
 */
task deleteImageSource(type: Delete) {
    description 'Removes the working copy of the project sources.'
    delete 'work'
}

task copyImageSource(type: Copy) {
    description 'Copies the project sources to be built by pack.'

    dependsOn project.tasks.findByName('deleteImageSource')

    from '.'
    into 'work'
    exclude '.gradle', 'work', 'build'
}

task buildImage(type: Exec) {
    group = 'evelyn'
    description 'Packages the service as a container image.'

    dependsOn project.tasks.findByName('copyImageSource')

    commandLine 'cmd', '/c', 'pack', 'build',
            "${project.name}",
            // Note that coping the .gradle directory doesn't work due to locks so project sources are copied and built
            // from a working directory.
            '--path', 'work',
            '--env', 'BP_JVM_VERSION=14.*',
            '--env', 'LIBRARY_AUTHENTICATION_VERSION=0.1.0-SNAPSHOT'
}

task copyWebAppBuild(type: Copy) {
    description 'Copies the web-app build to the top level.'
    from 'web-app/build'
    into 'build'
}

// Pack does not understand which sub-project to collect build artefacts from, so copy the sub-project build output
// after the build task for it completes.
project.tasks.findByPath(':web-app:build').finalizedBy(project.tasks.findByName('copyWebAppBuild'))

/*
 * ******************
 * Image publishing.
 * ******************
 */
task gitHubDockerLogin(type: Exec) {
    description 'Log into the GitHub\'s Docker package repository.'

    commandLine 'cmd', '/c', 'docker', 'login',
            'registry.evelyn.internal',
            '-u', project.findProperty("registry.user") ?: System.getenv("REGISTRY_USERNAME"),
            '-p', project.findProperty("registry.key") ?: System.getenv("REGISTRY_PASSWORD")
}

task gitHubDockerTag(type: Exec) {
    description 'Tag the locally built image for this project with the GitHub Docker package repository prefix.'

    dependsOn project.tasks.findByName('gitHubDockerLogin')

    commandLine 'cmd', '/c', 'docker', 'tag',
            project.name,
            "registry.evelyn.internal/ephyrasoftware/${project.name}:dev"
}

task gitHubDockerPush(type: Exec) {
    group = 'evelyn'
    description 'Publish a development image to the GitHub Docker package repository.'

    dependsOn project.tasks.findByName('gitHubDockerTag')

    commandLine 'cmd', '/c', 'docker', 'push',
            "registry.evelyn.internal/ephyrasoftware/${project.name}:dev"
}

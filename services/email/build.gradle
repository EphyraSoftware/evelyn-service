subprojects {
    apply plugin: 'java'

    repositories {
        jcenter()
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/EphyraSoftware/evelyn-service")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GPR_API_KEY")
            }
        }
        mavenLocal()
    }
}

ext {
    springFrameworkVersion = '5.1.9.RELEASE'
    springRabbitVersion = '2.1.11.RELEASE'
    javaxMailVersion = '1.6.1'
    lombokVersion = '1.18.10'
    springBootVersion = '2.1.8.RELEASE'

    libraryAuthenticationVersion = System.getenv("LIBRARY_AUTHENTICATION_VERSION") ?: 'dev-local'
}

project(":evelyn-service") {
    apply plugin: 'maven-publish'

    group = 'org.evelyn.service'

    dependencies {
        compile group: 'org.evelyn.library', name: 'message-models', version: "${libraryAuthenticationVersion}"

        // https://mvnrepository.com/artifact/org.springframework/spring-context
        compile group: 'org.springframework', name: 'spring-context', version: "${springFrameworkVersion}"

        // https://mvnrepository.com/artifact/org.springframework/spring-context-support
        compile group: 'org.springframework', name: 'spring-context-support', version: "${springFrameworkVersion}"

        // https://mvnrepository.com/artifact/org.springframework.amqp/spring-rabbit
        compile group: 'org.springframework.amqp', name: 'spring-rabbit', version: "${springRabbitVersion}"

        // https://mvnrepository.com/artifact/com.sun.mail/javax.mail
        compile group: 'com.sun.mail', name: 'javax.mail', version: "${javaxMailVersion}"

        // https://mvnrepository.com/artifact/org.projectlombok/lombok
        compileOnly group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"

        // TODO Use me for writing some tests!
        // https://mvnrepository.com/artifact/com.icegreen/greenmail
        //testCompile group: 'com.icegreen', name: 'greenmail', version: '1.5.10'
    }

    publishing {
        publications {
            maven(MavenPublication) {
                artifactId = 'email-service'
                version = 'dev-local' // Publish a rolling dev-local version
                from components.java
            }
        }
    }
}

project(':web-app') {
    dependencies {
        runtime project(':evelyn-service')

        // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: "${springBootVersion}"

        compileOnly group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: "${springBootVersion}"
    }
}

/*
 * ******************
 * Local JAR publishing.
 * ******************
 */
task localPublish {
    group = 'evelyn'
    description 'Publishes the core of the service to be used by the monolith server.'
    dependsOn ':evelyn-service:publishToMavenLocal'
}

/*
 * ******************
 * Image packaging.
 * ******************
 */
task deleteImageSource(type: Delete) {
    description 'Removes the working copy of the project sources.'
    delete 'work'
}

task copyImageSource(type: Copy) {
    description 'Copies the project sources to be built by pack.'

    dependsOn project.tasks.findByName('deleteImageSource')

    from '.'
    into 'work'
    exclude '.gradle', 'work'
}

task buildImage(type: Exec) {
    group = 'evelyn'
    description 'Packages the service as a container image.'

    dependsOn project.tasks.findByName('copyImageSource')

    commandLine 'cmd', '/c', 'pack', 'build',
            "${project.name}",
            // Note that coping the .gradle directory doesn't work due to locks so project sources are copied and built
            // from a working directory.
            '--path', 'work',
            '--env', "GPR_USER=${project.findProperty("gpr.user") ?: System.getenv("GPR_USER")}",
            '--env', "GPR_API_KEY=${project.findProperty("gpr.key") ?: System.getenv("GPR_API_KEY")}",
            '--env', 'LIBRARY_AUTHENTICATION_VERSION=dev'
}

task copyWebAppBuild(type: Copy) {
    description 'Copies the web-app build to the top level.'
    from 'web-app/build'
    into 'build'
}

// Pack does not understand which sub-project to collect build artefacts from, so copy the sub-project build output
// after the build task for it completes.
project.tasks.findByPath(':web-app:build').finalizedBy(project.tasks.findByName('copyWebAppBuild'))

/*
 * ******************
 * Image publishing.
 * ******************
 */
task gitHubDockerLogin(type: Exec) {
    description 'Log into the GitHub\'s Docker package repository.'

    commandLine 'cmd', '/c', 'docker', 'login',
            'docker.pkg.github.com',
            '-u', project.findProperty("gpr.user") ?: System.getenv("GPR_USER"),
            '-p', project.findProperty("gpr.key") ?: System.getenv("GPR_API_KEY")
}

task gitHubDockerTag(type: Exec) {
    description 'Tag the locally built image for this project with the GitHub Docker package repository prefix.'
    
    dependsOn project.tasks.findByName('gitHubDockerLogin')

    commandLine 'cmd', '/c', 'docker', 'tag',
        project.name,
        "docker.pkg.github.com/ephyrasoftware/evelyn-service/${project.name}:dev"
}

task gitHubDockerPush(type: Exec) {
    group = 'evelyn'
    description 'Publish a development image to the GitHub Docker package repository.'

    dependsOn project.tasks.findByName('gitHubDockerTag')

    commandLine 'cmd', '/c', 'docker', 'push',
            "docker.pkg.github.com/ephyrasoftware/evelyn-service/${project.name}:dev"
}

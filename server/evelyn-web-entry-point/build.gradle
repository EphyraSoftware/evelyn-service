plugins {
    // TODO Can only use literals in this block... Want to set version with variable.
    id 'org.springframework.boot' version '2.2.0.RELEASE'
    id 'java'
}

repositories {
    jcenter()
}

project.version = '0.1.0'

ext {
    springCloudZuulVersion = '1.4.7.RELEASE'
    springBootVersion = '2.2.0.RELEASE'
}

dependencies {
    // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-zuul
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-zuul', version: "${springCloudZuulVersion}"

    compileOnly group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: "${springBootVersion}"
}


/*
 * ******************
 * Image packaging.
 * ******************
 */
task copyImageSource(type: Copy) {
    description 'Copies the project sources to be built by pack.'

    from '.'
    into 'work'
    exclude '.gradle', 'work', 'build'
}

task buildImage(type: Exec) {
    group = 'evelyn'
    description 'Packages the service as a container image.'

    dependsOn project.tasks.findByName('copyImageSource')

    commandLine 'cmd', '/c', 'pack', 'build',
            "${project.name}",
            // Note that coping the .gradle directory doesn't work due to locks so project sources are copied and built
            // from a working directory.
            '--path', 'work',
            '--env', 'BP_JAVA_VERSION=13.*'
}

/*
 * ******************
 * Image publishing.
 * ******************
 */
task gitHubDockerLogin(type: Exec) {
    description 'Log into the GitHub\'s Docker package repository.'

    commandLine 'cmd', '/c', 'docker', 'login',
            'docker.pkg.github.com',
            '-u', project.findProperty("gpr.user") ?: System.getenv("GPR_USER"),
            '-p', project.findProperty("gpr.key") ?: System.getenv("GPR_API_KEY")
}

task gitHubDockerTag(type: Exec) {
    description 'Tag the locally built image for this project with the GitHub Docker package repository prefix.'

    dependsOn project.tasks.findByName('gitHubDockerLogin')

    commandLine 'cmd', '/c', 'docker', 'tag',
            project.name,
            "docker.pkg.github.com/ephyrasoftware/evelyn-service/${project.name}:dev"
}

task gitHubDockerPush(type: Exec) {
    group = 'evelyn'
    description 'Publish a development image to the GitHub Docker package repository.'

    dependsOn project.tasks.findByName('gitHubDockerTag')

    commandLine 'cmd', '/c', 'docker', 'push',
            "docker.pkg.github.com/ephyrasoftware/evelyn-service/${project.name}:dev"
}
